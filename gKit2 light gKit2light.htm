<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>gKit2 light: gKit2light</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js", "TeX/AMSmath.js", "TeX/AMSsymbols.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="https://cdn.jsdelivr.net/npm/mathjax@2/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="extra.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">gKit2 light
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search','.html');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="PageDoc"><div class="header">
  <div class="headertitle">
<div class="title">gKit2light </div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><p>gKit2light est une base de code permettant d'écrire des applications utilisant openGL.</p>
<p>pour l'utiliser, il faut installer quelques dépendances, selon le système que vous utilisez :</p><ul>
<li><a class="el" href="group__installation.html">Installation</a></li>
</ul>
<p>ensuite, c'est parti ! comment écrire une première application gKit :</p><ul>
<li><a class="el" href="group__debut.html">première application avec gKit</a></li>
<li><a class="el" href="group__math.html">manipulations de points, vecteur, matrices, transformations</a></li>
<li><a class="el" href="group__shaders.html">premiers shaders</a></li>
<li><a class="el" href="group__intro3d.html">introduction api 3d, openGL et pipeline graphique</a></li>
</ul>
<p>gKit2light est composé de plusieurs utilitaires :</p><ul>
<li><a class="el" href="window_8h.html">window.h</a> fournit un squelette d'application, <a class="el" href="app_8h.html">app.h</a> fournit une classe application de base,</li>
<li><a class="el" href="image_8h.html">image.h</a> et <a class="el" href="color_8h.html">color.h</a> permettent de charger, d'enregistrer et de manipuler des images, pixel par pixel,</li>
<li><a class="el" href="vec_8h.html">vec.h</a> et <a class="el" href="mat_8h.html">mat.h</a> définissent des vecteurs, des matrices pour manipuler des transformations, des points, des vecteurs,</li>
<li><a class="el" href="program_8h.html">program.h</a> permet de compiler facilement des shaders,</li>
<li><a class="el" href="uniforms_8h.html">uniforms.h</a> permet de définir les valeurs des uniforms des shaders,</li>
<li><a class="el" href="mesh_8h.html">mesh.h</a> permet de décrire des objets 3d,</li>
<li><a class="el" href="orbiter_8h.html">orbiter.h</a> permet de déplacer une caméra autour d'un objet pour l'observer,</li>
<li><a class="el" href="draw_8h.html">draw.h</a> affiche un mesh pour le point de vue d'une caméra,</li>
<li><a class="el" href="wavefront_8h.html">wavefront.h</a> permet de charger et d'enregistrer des fichiers .obj,</li>
<li><a class="el" href="texture_8h.html">texture.h</a> permet de charger une image et de la plaquer sur un objet,</li>
<li><a class="el" href="text_8h.html">text.h</a> permet d'afficher directement du texte sur la fenetre de l'application,</li>
<li><a class="el" href="widgets_8h.html">widgets.h</a> permet de controler l'application avec une interface graphique minimaliste.</li>
</ul>
<p>mais il y a aussi pas mal de tutos / exemple de code :</p><ul>
<li><a class="el" href="group__intro3d.html">introduction api 3d, openGL et pipeline graphique</a>,</li>
<li><a class="el" href="group__tuto__application.html">écrire une application openGL</a>,</li>
<li><a class="el" href="group__transformations.html">premiers objets, affichage et transformations</a>,</li>
<li><a class="el" href="group__decals.html">transformations, projection et textures : ombres simples et details</a>,</li>
<li><a class="el" href="tuto7_8cpp.html" title="reprise de tuto6.cpp mais en derivant App::init(), App::quit() et bien sur App::render().">tuto7.cpp</a>, utilise la classe <a class="el" href="classApp.html" title="classe application.">App</a> pour construire l'application,</li>
<li><a class="el" href="tuto7__camera_8cpp.html" title="reprise de tuto7.cpp mais en derivant AppCamera, avec gestion automatique d&#39;une camera.">tuto7_camera.cpp</a>, idem tuto7 mais utilise la classe <a class="el" href="classAppCamera.html" title="classe application.">AppCamera</a>, qui définit une camera par défaut,</li>
<li><a class="el" href="tuto8_8cpp.html" title="exemple d&#39;animation en derivant App::update()">tuto8.cpp</a>, exemple d'utilisation de <a class="el" href="classApp.html#aac4adc92fa3ef2fecf9a5be3fe86ed73" title="a deriver et redefinir pour animer les objets en fonction du temps.">App::update()</a> pour modifier la transformation de l'objet en fonction du temps,</li>
<li><a class="el" href="group__tuto__mesh__shader.html">tuto9.cpp</a>, dessine un objet <a class="el" href="classMesh.html" title="representation d&#39;un objet / maillage.">Mesh</a> avec un shader 'utilisateur', sans utiliser le shader par défaut, montre aussi comment utiliser simplement une, ou plusieurs, textures,</li>
<li><a class="el" href="tuto9__materials_8cpp.html">tuto9_materials.cpp</a>, dessine toutes les matières d'un objet <a class="el" href="classMesh.html" title="representation d&#39;un objet / maillage.">Mesh</a> avec un shader 'utilisateur', avec un seul <code>glDraw()</code>,</li>
<li><a class="el" href="tuto9__groups_8cpp.html">tuto9_groups.cpp</a>, dessiner toutes les matières d'un objet <a class="el" href="classMesh.html" title="representation d&#39;un objet / maillage.">Mesh</a> avec, ou sans shader 'utilisateur', avec un <code>glDraw()</code> par matiere,</li>
<li><a class="el" href="group__tuto__mesh__buffer.html">tuto9_buffers.cpp</a>, complète le tuto9 avec la création des buffers et du vertex array object, pour dessiner un objet <a class="el" href="classMesh.html" title="representation d&#39;un objet / maillage.">Mesh</a>, directement avec openGL...</li>
<li><a class="el" href="group__matiere.html">lumière et matière</a>, lumière, matière et brdf,</li>
<li><a class="el" href="group__reflets.html">lumière et reflets</a>, matière et reflets réalistes,</li>
<li><a class="el" href="group__brdf.html">shader et brdf</a>, écrire un shader, matière, brdf, pbr, etc.</li>
<li><a class="el" href="group__shader__kit.html">prototyper un shader program</a> est un utilitaire pour prototyper rapidement des shaders.</li>
</ul>
<p>plus ceux dédiés à openGL :</p><ul>
<li><a class="el" href="group__interfaceC.html">interface C openGL</a>,</li>
<li><a class="el" href="group__glsl.html">shaders et GLSL</a>,</li>
<li><a class="el" href="group__tuto2GL.html">compiler et linker un shader program</a>,</li>
<li><a class="el" href="group__tuto3GL.html">afficher plusieurs triangles, modifier les paramètres uniform d'un shader program</a>,</li>
<li><a class="el" href="group__tuto4GL.html">configurer un format de sommet, vertex array object</a>,</li>
<li><a class="el" href="group__shader__reflect.html">récupérer les uniforms et les attributs utilisés par un shader program</a>,</li>
<li><a class="el" href="group__tuto5GL.html">textures, samplers et pipeline</a>,</li>
<li><a class="el" href="group__draw.html">glDraw( ) et la famille</a>,</li>
<li><a class="el" href="group__wavefront.html">charger et preparer un objet wavefront .obj</a>,</li>
<li><a class="el" href="group__framebuffer.html">rendu multi-passes : shadow maps, post process, framebuffer object</a>,</li>
<li><a class="el" href="group__cubemap.html">utilisation, chargement et création de cubemap</a>,</li>
<li><a class="el" href="group__time.html">mesure du temps cpu et gpu</a>,</li>
<li><a class="el" href="group__uniform__buffers.html">openGL 3.3 : uniform buffers</a>,</li>
<li><a class="el" href="group__storage.html">openGL 4.3 : storage buffers</a>,</li>
<li><a class="el" href="group__storage__texture.html">openGL 4.3 : storage textures / images</a>,</li>
<li><a class="el" href="group__compute.html">openGL 4.3 : compute shaders</a>,</li>
<li><a class="el" href="group__mdi.html">openGL 4.3 : multi draw indirect</a>,</li>
<li><a class="el" href="group__ressources.html">ressources cpu / gpu et transfert de données</a>.</li>
</ul>
<p>et ceux dédiés au lancer de rayons :</p><ul>
<li><a class="el" href="group__intrort.html">principes du lancer de rayons</a>,</li>
<li><a class="el" href="group__acceleration.html">le lancer de rayons, ça rame ? ou pas ?</a>,</li>
<li><a class="el" href="group__sah.html">construction de BVH optimal, SAH et parcours efficace</a>,</li>
<li><a class="el" href="group__bvh2.html">instances et lancer de rayons ?</a>,</li>
<li><a class="el" href="group__precision.html">précision numérique et lancer de rayons</a>...</li>
</ul>
<p>et ceux dédiés à la synthèse d'images réaliste :</p><ul>
<li><a class="el" href="group__eqrendu.html">synthèse réaliste et intégration numérique : l'équation de rendu</a>,</li>
<li><a class="el" href="group__mc.html">intégration numérique et Monte Carlo</a>,</li>
<li><a class="el" href="group__mcrendu.html">Monte Carlo et équation de rendu</a>,</li>
<li><a class="el" href="group__mcdirect.html">Monte Carlo et éclairage direct</a>,</li>
<li><a class="el" href="group__mcdirect__code.html">Monte Carlo, éclairage direct : structurer le code</a>,</li>
<li><a class="el" href="group__mcvar.html">Monte Carlo, convergence et réduction de variance</a>,</li>
<li><a class="el" href="group__mcindirect1.html">Monte Carlo et éclairage indirect</a>,</li>
</ul>
<p>et un utilitaire pour jouer avec les shaders, <a class="el" href="shader__kit_8cpp.html">shader_kit.cpp</a> <a class="el" href="group__shader__kit.html">prototyper un shader program</a>. </p>
</div></div><!-- PageDoc -->
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Mon Nov 6 2023 15:06:50 for gKit2 light by&#160;<a href="https://www.doxygen.org/index.html"><img class="footer" src="doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1
</small></address>
</body>
</html>
